%% sample program project 01 (D)
%% for solving an initial value problem by explicit, or forward, Euler
%% finite difference method on uniform meshes only. In this program, we
%% let n changes from 10 to 10,000 to view the absolute error at the
%% maturity time T.
%% oct 2019 tim sheng baylor/hkbu

%% we note that the only true solution to the problem is
%% u(t) = sin(t) + 1.

clear all;            %% always use this command in the beginning

%% n = 10;            %% we want to experiment with it!
%% a = rand(n,1);     %% to general n random values in (0, 1)
%% x = sort(a);       %% to order the above n values

nn = 0;
mm = 10000;
for n = 10:100:mm
    nn = nn+1;         %% a controling index is updated

h0 = 1/(n+1);          %% to calculate the step size h0 for a uniform mesh
for k = 1:n
    y(k) = k*h0;       %% to generate a unifrom mesh of n internal points
end

%% the vectors x and y obtained have n internal mesh points each
%% and we may need them for plotting our solutions

%% but we need new vectors of (n+2) values each including end points
%% for calculations (for both nonuniform and unifrom cases)

%% xx(1) = 0;
yy(1) = 0;
%% u1(1) = 1;     %% the initial condition for nonuniform mesh formula
u2(1) = 1;     %% the initial condition for uniform mesh formula
%% true1(1) = 1;
true2(1) = 1; 
for k = 1:n
%%    xx(k+1) = x(k);
    yy(k+1) = y(k);
%%    true1(k+1) = sin(x(k))+1;
    true2(k+1) = sin(y(k))+1; 
end
%% xx(n+2) = 1;
yy(n+2) = 1;
%% true1(n+2) = sin(xx(n+2))+1;
true2(n+2) = sin(yy(n+2))+1; 

%% for k = 2:(n+2)                    %% why the index starts at 2 and ends at n+2?
%%    h(k) = xx(k) - xx(k-1);        %% -- because xx(1) is the initial position.
%% end 

for k = 2:(n+2)                    
%%  u1(k) = u1(k-1) + h(k)*cos(xx(k-1));   %% -- solution on nonuniform mesh.
    u2(k) = u2(k-1) + h0*cos(yy(k-1));     %% -- solution on uniform mesh.
end                                

% figure(3)
% plot(xx,u1,'linewidth',1.5)
% hold on
% plot(xx,true1,'r:','linewidth',1.5)
% xlabel('t')
% ylabel('u=u(t)')
% title('my solutions on nonuniform case')
% grid on
% hold off

% figure(4)
% plot(yy,u2,'linewidth',1.5)
% hold on
% plot(yy,true2,'r:','linewidth',1.5)
% xlabel('t')
% ylabel('u=u(t)')
% title('my solutions on uniform case')
% grid on
% hold off


%% Now, can we see the errors?
%% let's explore the absolute errors!

error(nn) = abs(u2(n+2) - true2(n+2));
xxx(nn) = n;
% errnu = abs(u1 - true1);
% errun = abs(u2 - true2);

end

x4(1) = xxx(nn);            % for fun in plot
error4(1) = error(nn);      % for fun in plot

figure(1)
plot(xxx,error,'b:','linewidth',1.7)
hold on
plot(x4,error4,'mo','linewidth',0.8)
xlabel('n')
ylabel('absolute error at T=1')
title('terminal error in corrected uniform case')
grid on
hold off

figure(2)
semilogy(xxx,error,'r:','linewidth',1.7)
hold on
semilogy(x4,error4,'mo','linewidth',0.8)
xlabel('n')
ylabel('absolute error at T=1')
title('terminal error in corrected uniform case')
grid on
hold off

